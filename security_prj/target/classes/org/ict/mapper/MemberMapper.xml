<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.rg/dtd/mybatis-3-mapper.dtd">
<!-- 위의 스키마 작성 후, 어떤 인터페이스의 메서드를 쿼리문과 연결해 줄지 아래와 같이 인터페이스 파일부터 mapper 태그로 연결합니다. -->
<mapper namespace="org.ict.mapper.MemberMapper">

	<resultMap type="org.ict.domain.MemberVO" id="memberMap">
		<!-- 조인 등으로 기존 VO와 구조가 다른 데이터가 리턴되는 경우
		resultMap으로 묶습니다. privary key를 id 태그에 넣고 
		result의 property에는 VO의 변수명, column은 DB상의 컬럼명을 넣습니다.
		이러면 VO의 변수명과 DB상의 컬럼명이 달라도 매칭이 됩니다. -->
		<id property="userid" column="userId"/>
		<result property="userid" column="userid"/>
		<result property="userpw" column="userpw"/>
		<result property="userName" column="username"/>
		<result property="regDate" column="regdate"/>
		<result property="updateDate" column="updatedate"/>
		<!-- 클래스 내부에 List<자료형> 을 멤버변수로 가지면 아래와 같이 collection 태그로 설정합니다. -->
		<collection property="authList" resultMap="authMap">
		
		</collection>
	</resultMap>
		<!-- collection 내부의 resultMap에 들어간 authMap 설정 -->
		<resultMap type="org.ict.domain.AuthVO" id="authMap">
			<!-- AuthVO 내부에 있던 멤버변수들을 여기 적어줍니다. -->
			<result property="userid" column="userid"/>
			<result property="auth" column="auth"/>
		</resultMap>
		
		<select id="read" resultMap="memberMap">
			SELECT m.userid, userpw, username, enabled, regdate, updatedate, a.auth FROM member_tbl m LEFT OUTER JOIN memeber_auth a on m.userid = a.userid WHERE m.userid = #{userid}
		</select>
	
</mapper>